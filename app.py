import streamlit as st
import cv2
import numpy as np
import joblib
from PIL import Image
import io
import os

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_avg_color_rgb (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏µ) ---
def get_avg_color_rgb(image_array):
    img = image_array
    img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

    # Step 1: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö BGR (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏π‡∏ô)
    lower_banana_color_bgr = np.array([0, 80, 80])
    upper_banana_color_bgr = np.array([120, 255, 255])

    # Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Mask
    color_mask = cv2.inRange(img_bgr, lower_banana_color_bgr, upper_banana_color_bgr)

    # Step 3: ‡∏´‡∏≤ Contours
    contours, _ = cv2.findContours(color_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Step 4: ‡∏´‡∏≤ Contours ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    max_area = 0
    largest_contour = None
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > max_area:
            max_area = area
            largest_contour = contour

    # Step 5: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢
    min_banana_pixel_area = 5000 # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π

    # Step 6: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if largest_contour is None or max_area < min_banana_pixel_area:
        return None, None, None # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢

    # Step 7: ‡∏™‡∏£‡πâ‡∏≤‡∏á Mask ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    final_mask = np.zeros(img_bgr.shape[:2], dtype="uint8")
    cv2.drawContours(final_mask, [largest_contour], -1, 255, -1)

    # Step 8: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ BGR
    mean_bgr = cv2.mean(img_bgr, mask=final_mask)[:3]

    avg_red = mean_bgr[2]
    avg_green = mean_bgr[1]
    avg_blue = mean_bgr[0]

    return avg_red, avg_green, avg_blue

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ Brix ---
def predict_ripeness(brix_value):
    ripeness_level_num = 0
    status_desc = ""
    advice_text = ""

    percentage_ripeness = min(100.0, max(0.0, (brix_value / 30.0) * 100.0))

    if brix_value <= 5.0:
        ripeness_level_num = 1
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏î‡∏¥‡∏ö"
        advice_text = "‚≠êÔ∏è ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡∏î‡∏¥‡∏ö‡∏≠‡∏¢‡∏π‡πà ‡∏°‡∏µ‡πÅ‡∏õ‡πâ‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏ö‡πà‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏´‡πâ‡∏á ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ó ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡πà‡∏°‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡πä‡∏≤‡∏ã‡πÄ‡∏≠‡∏ó‡∏¥‡∏•‡∏µ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡∏•) ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 5-7 ‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
    elif 5.0 < brix_value <= 8.0:
        ripeness_level_num = 2
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏î‡∏¥‡∏ö (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏°‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)"
        advice_text = "‚ú® ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡∏î‡∏¥‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏ö‡πà‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3-5 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô"
    elif 8.0 < brix_value <= 12.0:
        ripeness_level_num = 3
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏õ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)"
        advice_text = "üòä ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏¥‡πà‡∏° ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏±‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡πà‡∏°‡∏ï‡πà‡∏≠ 2-3 ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å‡∏ô‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô"
    elif 12.0 < brix_value <= 18.0:
        ripeness_level_num = 4
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏™‡∏∏‡∏Å‡∏û‡∏≠‡∏î‡∏µ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏•)"
        advice_text = "üòã ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏° ‡∏´‡∏ß‡∏≤‡∏ô‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏™‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
    elif 18.0 < brix_value <= 22.0:
        ripeness_level_num = 5
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏™‡∏∏‡∏Å (‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)"
        advice_text = "üëå ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ‡∏ñ‡∏∂‡∏á‡∏™‡∏∏‡∏Å‡∏á‡∏≠‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏° ‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏±‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏™‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ö‡∏ß‡∏ä‡∏ä‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡πâ‡∏Å‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏´‡∏≠‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"
    elif 22.0 < brix_value <= 25.0:
        ripeness_level_num = 6
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏™‡∏∏‡∏Å‡∏á‡∏≠‡∏° (‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏°‡∏≤‡∏Å)"
        advice_text = "üòâ ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏á‡∏≠‡∏° ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏î‡∏≥‡∏ö‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≥‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏â‡∏≤‡∏ö ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ï‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
    else: # brix_value > 25.0
        ripeness_level_num = 7
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏Å‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å (‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏•)"
        advice_text = "üëç ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∞ ‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏±‡∏î ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≥‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ö‡∏ß‡∏î‡∏ä‡∏µ ‡πÄ‡∏Ñ‡πâ‡∏Å‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏´‡∏≠‡∏° ‡∏™‡∏°‡∏π‡∏ó‡∏ï‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏¢‡∏°"
    
    return ripeness_level_num, status_desc, advice_text, percentage_ripeness

# --- ‡πÇ‡∏Ñ‡πâ‡∏î Streamlit App ‡∏´‡∏•‡∏±‡∏Å ---
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô GitHub Repository
model_path = 'banana_brix_model.pkl' 

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
try:
    model = joblib.load(model_path)
except FileNotFoundError:
    st.error(f"Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• '{model_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô GitHub Repository ‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏ò‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop() 

# --- ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á CSS ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°) ---
st.markdown("""
<style>
    .reportview-container {
        background: #F0F2F6; /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏° theme.backgroundColor */
    }
    .main .block-container {
        padding-top: 2rem; /* ‡∏•‡∏î padding ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */
        padding-bottom: 2rem; /* ‡∏•‡∏î padding ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */
        padding-left: 1rem;
        padding-right: 1rem;
    }
    .stButton>button {
        background-color: #FF4B4B; /* ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° theme.primaryColor */
        color: white;
        border-radius: 5px;
        border: 0px;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        transition: all 0.2s ease-in-out;
    }
    .stButton>button:hover {
        background-color: #FF6363; /* ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ä‡∏µ‡πâ */
        color: white;
    }
    h1 {
        text-align: center;
        color: #26272E; /* ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏° theme.textColor */
        margin-bottom: 0.5rem;
    }
    h2 {
        color: #FF4B4B; /* ‡∏™‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏° primaryColor */
        text-align: center;
        margin-bottom: 0.5rem;
    }
    h3 {
        color: #26272E; /* ‡∏™‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° textColor */
        margin-top: 1.5rem;
        margin-bottom: 0.5rem;
    }
    .stMetric {
        background-color: #FFFFFF; /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á metric */
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.05); /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤ */
    }
    .stAlert {
        border-radius: 10px;
    }
    .stFileUploader, .stCameraInput {
        border: 1px dashed #FF4B4B; /* ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */
        border-radius: 10px;
        padding: 1rem;
        text-align: center;
        background-color: #FFFFFF;
    }
</style>
""", unsafe_allow_html=True)


# --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏≠‡∏õ (‡πÉ‡∏ä‡πâ st.columns ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î layout) ---
col_logo, col_title = st.columns([1, 4])
with col_logo:
    st.image("https://images.emojiterra.com/google/noto-emoji/unicode-15/color/512px/1f34c.png", width=70) # ‡∏£‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
with col_title:
    st.title("‡πÅ‡∏≠‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤")
st.markdown("---")


# --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ (‡πÉ‡∏ä‡πâ st.columns ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î layout) ---
col1, col2 = st.columns(2) # ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå

with col1:
    st.header("1. ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤", type=["jpg", "jpeg", "png"])
    camera_input = st.camera_input("‡∏´‡∏£‡∏∑‡∏≠ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á")

with col2:
    st.header("2. ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    image_source = None
    if uploaded_file is not None:
        image_source = uploaded_file
    elif camera_input is not None:
        image_source = camera_input

    if image_source is not None:
        image_bytes = image_source.read()
        image_pil = Image.open(io.BytesIO(image_bytes))
        image_np = np.array(image_pil)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        st.image(image_pil, caption='‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', use_column_width=True)

        if st.button('‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢', use_container_width=True): # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...'):
                ripeness_result = get_avg_color_rgb(image_np) 

                if ripeness_result[0] is None:
                    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
                else:
                    r_avg, g_avg, b_avg = ripeness_result

                    input_features = np.array([[r_avg, g_avg, b_avg]])
                    predicted_brix = model.predict(input_features)[0]

                    ripeness_level_num, ripeness_status, advice, percentage_ripeness = predict_ripeness(predicted_brix)

                    st.success("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                    st.metric(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô (Brix)", value=f"{predicted_brix:.2f} ¬∞Bx")
                    st.metric(label="‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å", value=f"{percentage_ripeness:.1f}%")
                    st.subheader(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤: {ripeness_status}")
                    st.subheader(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å: {ripeness_level_num} (‡∏à‡∏≤‡∏Å 7 ‡∏£‡∏∞‡∏î‡∏±‡∏ö)")
                    st.info(advice) 
                    st.caption(f"‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (RGB) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: R={r_avg:.0f}, G={g_avg:.0f}, B={avg_blue:.0f}")
    else:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏ß‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô") # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û

st.markdown("---")
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© (Footer)
st.markdown("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ò‡∏£ ‡∏û‡∏¥‡∏°‡∏™‡∏≤, ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡∏¥‡∏ä‡∏≤‡∏†‡∏≤ ‡∏®‡∏£‡∏µ‡∏•‡∏∞‡∏ß‡∏±‡∏•‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏£‡∏±‡∏ï‡∏ô‡∏≤‡∏ß‡∏î‡∏µ ‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏®‡∏£‡∏µ<br>‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤: ‡∏ô‡∏≤‡∏¢‡∏≠‡∏ä‡∏¥‡∏ï‡∏û‡∏• ‡∏ö‡∏∏‡∏ì‡∏£‡∏±‡∏ï‡∏ô‡πå, ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏î‡∏µ ‡∏ß‡∏á‡∏©‡πå‡∏™‡∏∏‡∏ò‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏°‡πÉ‡∏à ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡∏á‡∏Å‡∏£‡∏î<br>‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏á‡πÇ‡∏û‡∏£‡∏á‡∏û‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏° ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡∏ï‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å ‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå", unsafe_allow_html=True)
