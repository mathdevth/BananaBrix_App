import streamlit as st
import cv2
import numpy as np
import joblib
from PIL import Image
import io
import os

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_avg_color_rgb (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏µ) ---
def get_avg_color_rgb(image_array):
    img = image_array
    # image_array ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å Streamlit ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô RGB
    # ‡πÅ‡∏ï‡πà OpenCV (cv2) ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö BGR.
    img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

    # Step 1: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö BGR
    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏π‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π‡πÉ‡∏ä‡πâ
    # (B, G, R)
    lower_banana_color_bgr = np.array([0, 80, 80])    # ‡∏™‡∏µ‡∏Ñ‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏¢‡πÜ
    upper_banana_color_bgr = np.array([120, 255, 255]) # ‡∏™‡∏µ‡∏Ñ‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÅ‡∏î‡∏á/‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏°‡∏≤‡∏Å

    # Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Mask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    color_mask = cv2.inRange(img_bgr, lower_banana_color_bgr, upper_banana_color_bgr)

    # Step 3: ‡∏´‡∏≤ Contours (‡πÇ‡∏Ñ‡∏£‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô) ‡πÉ‡∏ô Mask
    # RETR_EXTERNAL: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏£‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
    # CHAIN_APPROX_SIMPLE: ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏à‡∏∏‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏£‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
    contours, _ = cv2.findContours(color_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Step 4: ‡∏´‡∏≤ Contours ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏™‡∏±‡∏ô‡∏ô‡∏¥‡∏©‡∏ê‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢)
    max_area = 0
    largest_contour = None
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > max_area:
            max_area = area
            largest_contour = contour

    # Step 5: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢
    # **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π**
    # ‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢
    min_banana_pixel_area = 5000 # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

    # Step 6: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏≠‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if largest_contour is None or max_area < min_banana_pixel_area:
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        return None, None, None # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢/‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

    # Step 7: ‡∏™‡∏£‡πâ‡∏≤‡∏á Mask ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏Å‡∏•‡πâ‡∏ß‡∏¢) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    final_mask = np.zeros(img_bgr.shape[:2], dtype="uint8") # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mask ‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ
    cv2.drawContours(final_mask, [largest_contour], -1, 255, -1) # ‡∏ß‡∏≤‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß (255) ‡∏•‡∏á‡∏ö‡∏ô Mask

    # Step 8: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ BGR ‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Mask ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢)
    mean_bgr = cv2.mean(img_bgr, mask=final_mask)[:3] # ‡πÉ‡∏ä‡πâ final_mask

    avg_red = mean_bgr[2] # BGR -> RGB (R ‡∏Ñ‡∏∑‡∏≠ index 2)
    avg_green = mean_bgr[1] # G ‡∏Ñ‡∏∑‡∏≠ index 1
    avg_blue = mean_bgr[0] # B ‡∏Ñ‡∏∑‡∏≠ index 0

    return avg_red, avg_green, avg_blue

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ Brix ---
# ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤ Brix ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π
def predict_ripeness(brix_value):
    ripeness_level_num = 0 # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    status_desc = ""
    advice_text = ""

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å (Brix 0% = 0, Brix 30% = 100%)
    # ‡∏Ñ‡πà‡∏≤ 30.0 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ Brix ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏∏‡∏Å‡∏à‡∏±‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
    percentage_ripeness = min(100.0, max(0.0, (brix_value / 30.0) * 100.0))

    if brix_value <= 5.0:
        ripeness_level_num = 1
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏î‡∏¥‡∏ö"
        advice_text = "‚≠êÔ∏è ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡∏î‡∏¥‡∏ö‡∏≠‡∏¢‡∏π‡πà ‡∏°‡∏µ‡πÅ‡∏õ‡πâ‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏ö‡πà‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏´‡πâ‡∏á ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ó ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡πà‡∏°‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡πä‡∏≤‡∏ã‡πÄ‡∏≠‡∏ó‡∏¥‡∏•‡∏µ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡∏•) ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 5-7 ‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
    elif 5.0 < brix_value <= 8.0:
        ripeness_level_num = 2
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏î‡∏¥‡∏ö (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏°‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)"
        advice_text = "‚ú® ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡∏î‡∏¥‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏ö‡πà‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3-5 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô"
    elif 8.0 < brix_value <= 12.0:
        ripeness_level_num = 3
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏õ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)"
        advice_text = "üòä ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏¥‡πà‡∏° ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏±‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡πà‡∏°‡∏ï‡πà‡∏≠ 2-3 ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å‡∏ô‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô"
    elif 12.0 < brix_value <= 18.0:
        ripeness_level_num = 4
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏™‡∏∏‡∏Å‡∏û‡∏≠‡∏î‡∏µ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏•)"
        advice_text = "üòã ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏° ‡∏´‡∏ß‡∏≤‡∏ô‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏™‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
    elif 18.0 < brix_value <= 22.0:
        ripeness_level_num = 5
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏™‡∏∏‡∏Å (‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)"
        advice_text = "üëå ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ‡∏ñ‡∏∂‡∏á‡∏™‡∏∏‡∏Å‡∏á‡∏≠‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏° ‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏±‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏™‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ö‡∏ß‡∏ä‡∏ä‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡πâ‡∏Å‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏´‡∏≠‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"
    elif 22.0 < brix_value <= 25.0:
        ripeness_level_num = 6
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏™‡∏∏‡∏Å‡∏á‡∏≠‡∏° (‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏°‡∏≤‡∏Å)"
        advice_text = "üòâ ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏á‡∏≠‡∏° ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏î‡∏≥‡∏ö‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≥‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏â‡∏≤‡∏ö ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ï‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
    else: # brix_value > 25.0
        ripeness_level_num = 7
        status_desc = "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏Å‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å (‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏•)"
        advice_text = "üëç ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∞ ‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏±‡∏î ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≥‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ö‡∏ß‡∏î‡∏ä‡∏µ ‡πÄ‡∏Ñ‡πâ‡∏Å‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏´‡∏≠‡∏° ‡∏™‡∏°‡∏π‡∏ó‡∏ï‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏¢‡∏°"
    
    return ripeness_level_num, status_desc, advice_text, percentage_ripeness

# --- ‡πÇ‡∏Ñ‡πâ‡∏î Streamlit App ‡∏´‡∏•‡∏±‡∏Å ---
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô GitHub Repository
# ***‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç***: ‡πÑ‡∏ü‡∏•‡πå banana_brix_model.pkl ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö app.py ‡πÉ‡∏ô GitHub
model_path = 'banana_brix_model.pkl' 
# ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .pkl ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏∑‡πà‡∏≠ 'models' ‡πÉ‡∏ô GitHub ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 'models/banana_brix_model.pkl'

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
try:
    model = joblib.load(model_path)
except FileNotFoundError:
    st.error(f"Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• '{model_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô GitHub Repository ‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏ò‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop() # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Streamlit ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠

st.title("üçå ‡πÅ‡∏≠‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤ üçå")
st.markdown("---")

st.header("1. ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤")
uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤", type=["jpg", "jpeg", "png"])
camera_input = st.camera_input("‡∏´‡∏£‡∏∑‡∏≠ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á") # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

image_source = None
if uploaded_file is not None:
    image_source = uploaded_file
elif camera_input is not None:
    image_source = camera_input

if image_source is not None:
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Streamlit
    image_bytes = image_source.read()
    image_pil = Image.open(io.BytesIO(image_bytes))
    image_np = np.array(image_pil) # ‡πÅ‡∏õ‡∏•‡∏á PIL Image ‡πÄ‡∏õ‡πá‡∏ô NumPy array (RGB)
    
    # ***‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å image_np_bgr ‡πÄ‡∏õ‡πá‡∏ô image_np ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ get_avg_color_rgb***
    # ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ get_avg_color_rgb ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô BGR ‡πÄ‡∏≠‡∏á
    ripeness_result = get_avg_color_rgb(image_np) 

    st.image(image_pil, caption='‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', use_column_width=True)

    st.header("2. ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    if st.button('‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢'):
        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...'):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ get_avg_color_rgb ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if ripeness_result[0] is None: # ‡∏ñ‡πâ‡∏≤ r_avg ‡πÄ‡∏õ‡πá‡∏ô None
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
            else:
                r_avg, g_avg, b_avg = ripeness_result # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ R, G, B ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 2D array)
                input_features = np.array([[r_avg, g_avg, b_avg]])
                predicted_brix = model.predict(input_features)[0]

                # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                ripeness_level_num, ripeness_status, advice, percentage_ripeness = predict_ripeness(predicted_brix)

                st.success("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                st.metric(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô (Brix)", value=f"{predicted_brix:.2f} ¬∞Bx")
                st.metric(label="‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å", value=f"{percentage_ripeness:.1f}%") # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å
                st.subheader(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤: {ripeness_status}")
                st.subheader(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å: {ripeness_level_num} (‡∏à‡∏≤‡∏Å 7 ‡∏£‡∏∞‡∏î‡∏±‡∏ö)")
                st.info(advice) # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                st.caption(f"‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (RGB) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: R={r_avg:.0f}, G={g_avg:.0f}, B={b_avg:.0f}")

st.markdown("---")
st.caption("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ò‡∏£ ‡∏û‡∏¥‡∏°‡∏™‡∏≤, ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡∏¥‡∏ä‡∏≤‡∏†‡∏≤ ‡∏®‡∏£‡∏µ‡∏•‡∏∞‡∏ß‡∏±‡∏•‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏£‡∏±‡∏ï‡∏ô‡∏≤‡∏ß‡∏î‡∏µ ‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏®‡∏£‡∏µ\n‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤: ‡∏ô‡∏≤‡∏¢‡∏≠‡∏ä‡∏¥‡∏ï‡∏û‡∏• ‡∏ö‡∏∏‡∏ì‡∏£‡∏±‡∏ï‡∏ô‡πå, ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏î‡∏µ ‡∏ß‡∏á‡∏©‡πå‡∏™‡∏∏‡∏ò‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏°‡πÉ‡∏à ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡∏á‡∏Å‡∏£‡∏î\n‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏á‡πÇ‡∏û‡∏£‡∏á‡∏û‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏° ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡∏ï‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å ‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå")
