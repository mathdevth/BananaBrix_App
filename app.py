import streamlit as st
import cv2
import numpy as np
import joblib
from PIL import Image
import io
import os

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô get_avg_color_rgb (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏µ) ---
def get_avg_color_rgb(image_array):
    img = image_array
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ BGR ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏ß‡∏¢ (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏π‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏ß‡∏¢)
    lower_banana_color_bgr = np.array([0, 80, 80])
    upper_banana_color_bgr = np.array([120, 255, 255])

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢
    mask = cv2.inRange(img, lower_banana_color_bgr, upper_banana_color_bgr)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if np.count_nonzero(mask) == 0:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏™‡∏á‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û")
        return None, None, None

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ BGR ‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡πÉ‡∏ô Mask
    mean_bgr = cv2.mean(img, mask=mask)[:3]
    avg_red = mean_bgr[2] # BGR -> RGB (R ‡∏Ñ‡∏∑‡∏≠ index 2)
    avg_green = mean_bgr[1] # G ‡∏Ñ‡∏∑‡∏≠ index 1
    avg_blue = mean_bgr[0] # B ‡∏Ñ‡∏∑‡∏≠ index 0

    return avg_red, avg_green, avg_blue

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ Brix ---
# ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤ Brix ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π
def predict_ripeness(brix_value):
    if brix_value <= 8.0:
        return "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏î‡∏¥‡∏ö", "‚≠êÔ∏è ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡∏î‡∏¥‡∏ö‡∏≠‡∏¢‡∏π‡πà ‡∏°‡∏µ‡πÅ‡∏õ‡πâ‡∏á‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ö‡πà‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏´‡πâ‡∏á ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ó ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 5-7 ‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
    elif 8.0 < brix_value <= 14.0:
        return "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å", "üòä ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏¥‡πà‡∏° ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏±‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡πà‡∏°‡∏ï‡πà‡∏≠ 2-3 ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Å‡∏ô‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô"
    elif 14.0 < brix_value <= 20.0:
        return "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏™‡∏∏‡∏Å‡∏û‡∏≠‡∏î‡∏µ", "üòã ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ ‡∏´‡∏ß‡∏≤‡∏ô‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏™‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
    elif 20.0 < brix_value <= 25.0:
        return "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏™‡∏∏‡∏Å‡∏á‡∏≠‡∏°", "üòâ ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏á‡∏≠‡∏° ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏î‡∏≥‡∏ö‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏â‡∏≤‡∏ö ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ï‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
    else: # brix_value > 25.0
        return "‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏Å‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å", "üëç ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏™‡∏∏‡∏Å‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∞ ‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏±‡∏î ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡πÑ‡∏õ‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≥‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ö‡∏ß‡∏î‡∏ä‡∏µ ‡πÄ‡∏Ñ‡πâ‡∏Å‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏´‡∏≠‡∏° ‡∏™‡∏°‡∏π‡∏ó‡∏ï‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏¢‡∏°"

# --- ‡πÇ‡∏Ñ‡πâ‡∏î Streamlit App ‡∏´‡∏•‡∏±‡∏Å ---
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô GitHub Repository
# ***‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç***: ‡πÑ‡∏ü‡∏•‡πå banana_brix_model.pkl ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö app.py ‡πÉ‡∏ô GitHub
model_path = 'banana_brix_model.pkl' 
# ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .pkl ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏∑‡πà‡∏≠ 'models' ‡πÉ‡∏ô GitHub ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 'models/banana_brix_model.pkl'

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
try:
    model = joblib.load(model_path)
except FileNotFoundError:
    st.error(f"Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• '{model_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô GitHub Repository ‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏ò‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop() # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Streamlit ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠

st.title("üçå ‡πÅ‡∏≠‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤ üçå")
st.markdown("---")

st.header("1. ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤")
uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤", type=["jpg", "jpeg", "png"])
camera_input = st.camera_input("‡∏´‡∏£‡∏∑‡∏≠ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á") # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

image_source = None
if uploaded_file is not None:
    image_source = uploaded_file
elif camera_input is not None:
    image_source = camera_input

if image_source is not None:
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Streamlit
    image_bytes = image_source.read()
    image_pil = Image.open(io.BytesIO(image_bytes))
    image_np = np.array(image_pil) # ‡πÅ‡∏õ‡∏•‡∏á PIL Image ‡πÄ‡∏õ‡πá‡∏ô NumPy array (RGB)
    image_np_bgr = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô BGR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenCV

    st.image(image_pil, caption='‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', use_column_width=True)

    st.header("2. ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    if st.button('‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢'):
        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...'):
            r_avg, g_avg, b_avg = get_avg_color_rgb(image_np_bgr)

            if r_avg is not None:
                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 2D array)
                input_features = np.array([[r_avg, g_avg, b_avg]])
                predicted_brix = model.predict(input_features)[0]

                # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                ripeness_status, advice = predict_ripeness(predicted_brix)

                st.success("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                st.metric(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô (Brix)", value=f"{predicted_brix:.2f} ¬∞Bx")
                st.subheader(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ß‡πâ‡∏≤: {ripeness_status}")
                st.info(advice) # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                st.caption(f"‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (RGB) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: R={r_avg:.0f}, G={g_avg:.0f}, B={b_avg:.0f}")

            else:
                st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô")

st.markdown("---")
st.caption("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏á‡πÇ‡∏û‡∏£‡∏á‡∏û‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏°")
